
i2c_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  0000098a  00000a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000e0  008000e0  00000a9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b11  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4e  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f6a  00000000  00000000  000033eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069a  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e68  00000000  00000000  00004cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 c3 04 	jmp	0x986	; 0x986 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <verifyPassword>:
#define DOOR_CLOSE_ANGLE 0

const uint8 CORRECT_PASSWORD[PASSWORD_LENGTH] = {'1','2','3','4'};

uint8 verifyPassword(uint8 *entered_pwd)
{
  92:	bc 01       	movw	r22, r24
	for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0d c0       	rjmp	.+26     	; 0xb2 <verifyPassword+0x20>
	{
		if(entered_pwd[i] != CORRECT_PASSWORD[i])
  98:	29 2f       	mov	r18, r25
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	fb 01       	movw	r30, r22
  9e:	e2 0f       	add	r30, r18
  a0:	f3 1f       	adc	r31, r19
  a2:	40 81       	ld	r20, Z
  a4:	f9 01       	movw	r30, r18
  a6:	e5 53       	subi	r30, 0x35	; 53
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	20 81       	ld	r18, Z
  ac:	42 13       	cpse	r20, r18
  ae:	05 c0       	rjmp	.+10     	; 0xba <verifyPassword+0x28>

const uint8 CORRECT_PASSWORD[PASSWORD_LENGTH] = {'1','2','3','4'};

uint8 verifyPassword(uint8 *entered_pwd)
{
	for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
  b0:	9f 5f       	subi	r25, 0xFF	; 255
  b2:	94 30       	cpi	r25, 0x04	; 4
  b4:	88 f3       	brcs	.-30     	; 0x98 <verifyPassword+0x6>
	{
		if(entered_pwd[i] != CORRECT_PASSWORD[i])
		return FALSE;
	}
	return TRUE;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
uint8 verifyPassword(uint8 *entered_pwd)
{
	for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		if(entered_pwd[i] != CORRECT_PASSWORD[i])
		return FALSE;
  ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	return TRUE;
}
  bc:	08 95       	ret

000000be <RESET_BUTTON_init>:

// Function to initialize reset button
void RESET_BUTTON_init(void)
{
	// Configure reset button pin as input with pull-up
	GPIO_setupPinDirection(RESET_BUTTON_PORT, RESET_BUTTON_PIN, PIN_INPUT);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <GPIO_setupPinDirection>
	GPIO_writePin(RESET_BUTTON_PORT, RESET_BUTTON_PIN, LOGIC_HIGH);
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 6d 03 	call	0x6da	; 0x6da <GPIO_writePin>
  d2:	08 95       	ret

000000d4 <RESET_BUTTON_isPressed>:
}

// Function to check reset button
uint8 RESET_BUTTON_isPressed(void)
{
	return (GPIO_readPin(RESET_BUTTON_PORT, RESET_BUTTON_PIN) == LOGIC_LOW);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <GPIO_readPin>
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	81 11       	cpse	r24, r1
  e0:	90 e0       	ldi	r25, 0x00	; 0
}
  e2:	89 2f       	mov	r24, r25
  e4:	08 95       	ret

000000e6 <main>:

int main(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	00 d0       	rcall	.+0      	; 0xec <main+0x6>
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0x8>
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	uint8 attempts = 0;
	uint8 password[PASSWORD_LENGTH];
	
	// Initialize peripherals
	LCD_init();
  f2:	0e 94 10 02 	call	0x420	; 0x420 <LCD_init>
	KEYPAD_init();
  f6:	0e 94 24 01 	call	0x248	; 0x248 <KEYPAD_init>
	SERVO_init();
  fa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SERVO_init>
	RESET_BUTTON_init();
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <RESET_BUTTON_init>
	return (GPIO_readPin(RESET_BUTTON_PORT, RESET_BUTTON_PIN) == LOGIC_LOW);
}

int main(void)
{
	uint8 attempts = 0;
 102:	00 e0       	ldi	r16, 0x00	; 0
	RESET_BUTTON_init();
	
	while(1)
	{
		// Reset password entry
		for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 c0       	rjmp	.+16     	; 0x118 <main+0x32>
		password[i] = 0;
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e8 0f       	add	r30, r24
 112:	f1 1d       	adc	r31, r1
 114:	10 82       	st	Z, r1
	RESET_BUTTON_init();
	
	while(1)
	{
		// Reset password entry
		for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	b0 f3       	brcs	.-20     	; 0x108 <main+0x22>
		password[i] = 0;
		
		// Display password prompt
		LCD_clearScreen();
 11c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_clearScreen>
		LCD_displayString("Enter Password:");
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
		LCD_moveCursor(1, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_moveCursor>
		
		// Collect password
		for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	0f c0       	rjmp	.+30     	; 0x152 <main+0x6c>
		{
			password[i] = KEYPAD_getPressedKey();
 134:	e1 2e       	mov	r14, r17
 136:	f1 2c       	mov	r15, r1
 138:	0e 94 49 01 	call	0x292	; 0x292 <KEYPAD_getPressedKey>
 13c:	e1 e0       	ldi	r30, 0x01	; 1
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	ee 0d       	add	r30, r14
 146:	ff 1d       	adc	r31, r15
 148:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
 14a:	8a e2       	ldi	r24, 0x2A	; 42
 14c:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_displayCharacter>
		LCD_clearScreen();
		LCD_displayString("Enter Password:");
		LCD_moveCursor(1, 0);
		
		// Collect password
		for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
 150:	1f 5f       	subi	r17, 0xFF	; 255
 152:	14 30       	cpi	r17, 0x04	; 4
 154:	78 f3       	brcs	.-34     	; 0x134 <main+0x4e>
			password[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
		}
		
		// Verify password
		if(verifyPassword(password))
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 49 00 	call	0x92	; 0x92 <verifyPassword>
 15e:	88 23       	and	r24, r24
 160:	a1 f1       	breq	.+104    	; 0x1ca <main+0xe4>
		{
			// Access granted
			LCD_clearScreen();
 162:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_clearScreen>
			LCD_displayString("Access Granted!");
 166:	80 e7       	ldi	r24, 0x70	; 112
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
			
			// Open door
			SERVO_setAngle(DOOR_OPEN_ANGLE);
 16e:	8a e5       	ldi	r24, 0x5A	; 90
 170:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SERVO_setAngle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f e3       	ldi	r18, 0x3F	; 63
 176:	32 e4       	ldi	r19, 0x42	; 66
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	30 40       	sbci	r19, 0x00	; 0
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x94>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x9e>
 184:	00 00       	nop
			
			// Wait for user interaction
			while(1)
			{
				// Check reset button
				if(RESET_BUTTON_isPressed())
 186:	0e 94 6a 00 	call	0xd4	; 0xd4 <RESET_BUTTON_isPressed>
 18a:	88 23       	and	r24, r24
 18c:	e1 f3       	breq	.-8      	; 0x186 <main+0xa0>
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xac>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0xb2>
 198:	00 00       	nop
				{
					// Debounce
					_delay_ms(50);
					
					// Wait for button release
					while(RESET_BUTTON_isPressed());
 19a:	0e 94 6a 00 	call	0xd4	; 0xd4 <RESET_BUTTON_isPressed>
 19e:	81 11       	cpse	r24, r1
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <main+0xb4>
					
					// Close door
					LCD_clearScreen();
 1a2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_clearScreen>
					LCD_displayString("Door Closing...");
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
					SERVO_setAngle(DOOR_CLOSE_ANGLE);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SERVO_setAngle>
 1b4:	9f e3       	ldi	r25, 0x3F	; 63
 1b6:	2d e0       	ldi	r18, 0x0D	; 13
 1b8:	33 e0       	ldi	r19, 0x03	; 3
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	30 40       	sbci	r19, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xd4>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xde>
 1c4:	00 00       	nop
			// Open door
			SERVO_setAngle(DOOR_OPEN_ANGLE);
			_delay_ms(5000);  // Wait 5 seconds
			
			// Reset attempts
			attempts = 0;
 1c6:	00 e0       	ldi	r16, 0x00	; 0
 1c8:	9d cf       	rjmp	.-198    	; 0x104 <main+0x1e>
			}
		}
		else
		{
			// Access denied
			attempts++;
 1ca:	0f 5f       	subi	r16, 0xFF	; 255
			
			if(attempts >= MAX_ATTEMPTS)
 1cc:	03 30       	cpi	r16, 0x03	; 3
 1ce:	f0 f0       	brcs	.+60     	; 0x20c <main+0x126>
			{
				// Lockout
				LCD_clearScreen();
 1d0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_clearScreen>
				LCD_displayString("Locked Out!");
 1d4:	80 e9       	ldi	r24, 0x90	; 144
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
				LCD_moveCursor(1, 0);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_moveCursor>
				LCD_displayString("Wait 30 seconds");
 1e4:	8c e9       	ldi	r24, 0x9C	; 156
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
				
				// Wait 30 seconds
				for(uint8 i = 0; i < LOCKOUT_TIME; i++)
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0a c0       	rjmp	.+20     	; 0x204 <main+0x11e>
 1f0:	9f e3       	ldi	r25, 0x3F	; 63
 1f2:	2d e0       	ldi	r18, 0x0D	; 13
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	30 40       	sbci	r19, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x110>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x11a>
 200:	00 00       	nop
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	8e 31       	cpi	r24, 0x1E	; 30
 206:	a0 f3       	brcs	.-24     	; 0x1f0 <main+0x10a>
				_delay_ms(1000);
				
				// Reset attempts
				attempts = 0;
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	7c cf       	rjmp	.-264    	; 0x104 <main+0x1e>
			}
			else
			{
				// Show attempts left
				LCD_clearScreen();
 20c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_clearScreen>
				LCD_displayString("Wrong Password!");
 210:	8c ea       	ldi	r24, 0xAC	; 172
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
				LCD_moveCursor(1, 0);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_moveCursor>
				LCD_intgerToString(MAX_ATTEMPTS - attempts);
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	80 1b       	sub	r24, r16
 226:	91 09       	sbc	r25, r1
 228:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_intgerToString>
				LCD_displayString(" attempts left");
 22c:	8c eb       	ldi	r24, 0xBC	; 188
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
 234:	8f e7       	ldi	r24, 0x7F	; 127
 236:	9a e1       	ldi	r25, 0x1A	; 26
 238:	26 e0       	ldi	r18, 0x06	; 6
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	20 40       	sbci	r18, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x154>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x15e>
 244:	00 00       	nop
 246:	5e cf       	rjmp	.-324    	; 0x104 <main+0x1e>

00000248 <KEYPAD_init>:
	{'7','8','9','C'},
	{'*','0','#','D'}
};

void KEYPAD_init(void)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
	// Configure row pins as input with pull-up
	for(uint8 i = 0; i < KEYPAD_ROWS; i++)
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	0b c0       	rjmp	.+22     	; 0x266 <KEYPAD_init+0x1e>
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i, PIN_INPUT);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	6c 2f       	mov	r22, r28
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <GPIO_setupPinDirection>
		GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i, LOGIC_HIGH);
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	6c 2f       	mov	r22, r28
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 6d 03 	call	0x6da	; 0x6da <GPIO_writePin>
};

void KEYPAD_init(void)
{
	// Configure row pins as input with pull-up
	for(uint8 i = 0; i < KEYPAD_ROWS; i++)
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	c4 30       	cpi	r28, 0x04	; 4
 268:	98 f3       	brcs	.-26     	; 0x250 <KEYPAD_init+0x8>
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	0d c0       	rjmp	.+26     	; 0x288 <KEYPAD_init+0x40>
	}
	
	// Configure column pins as output, initially high
	for(uint8 i = 0; i < KEYPAD_COLS; i++)
	{
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + i, PIN_OUTPUT);
 26e:	d4 e0       	ldi	r29, 0x04	; 4
 270:	dc 0f       	add	r29, r28
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	6d 2f       	mov	r22, r29
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <GPIO_setupPinDirection>
		GPIO_writePin(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + i, LOGIC_HIGH);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	6d 2f       	mov	r22, r29
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 6d 03 	call	0x6da	; 0x6da <GPIO_writePin>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i, PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i, LOGIC_HIGH);
	}
	
	// Configure column pins as output, initially high
	for(uint8 i = 0; i < KEYPAD_COLS; i++)
 286:	cf 5f       	subi	r28, 0xFF	; 255
 288:	c4 30       	cpi	r28, 0x04	; 4
 28a:	88 f3       	brcs	.-30     	; 0x26e <KEYPAD_init+0x26>
	{
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + i, PIN_OUTPUT);
		GPIO_writePin(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + i, LOGIC_HIGH);
	}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey(void)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
	while(1)
	{
		for(uint8 col = 0; col < KEYPAD_COLS; col++)
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	2e c0       	rjmp	.+92     	; 0x2f6 <KEYPAD_getPressedKey+0x64>
		{
			// Deactivate all columns
			GPIO_writePort(KEYPAD_COL_PORT, 0xFF);
 29a:	6f ef       	ldi	r22, 0xFF	; 255
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 26 04 	call	0x84c	; 0x84c <GPIO_writePort>
			
			// Activate current column
			GPIO_writePin(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + col, LOGIC_LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	6d 0f       	add	r22, r29
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 6d 03 	call	0x6da	; 0x6da <GPIO_writePin>
			
			// Check rows
			for(uint8 row = 0; row < KEYPAD_ROWS; row++)
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	1f c0       	rjmp	.+62     	; 0x2f0 <KEYPAD_getPressedKey+0x5e>
			{
				if(GPIO_readPin(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row) == LOGIC_LOW)
 2b2:	6c 2f       	mov	r22, r28
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <GPIO_readPin>
 2ba:	81 11       	cpse	r24, r1
 2bc:	18 c0       	rjmp	.+48     	; 0x2ee <KEYPAD_getPressedKey+0x5c>
 2be:	83 ed       	ldi	r24, 0xD3	; 211
 2c0:	90 e3       	ldi	r25, 0x30	; 48
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <KEYPAD_getPressedKey+0x30>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <KEYPAD_getPressedKey+0x36>
 2c8:	00 00       	nop
				{
					// Debounce
					_delay_ms(50);
					
					// Wait for key release
					while(GPIO_readPin(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row) == LOGIC_LOW);
 2ca:	6c 2f       	mov	r22, r28
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <GPIO_readPin>
 2d2:	88 23       	and	r24, r24
 2d4:	d1 f3       	breq	.-12     	; 0x2ca <KEYPAD_getPressedKey+0x38>
					
					return KEYPAD_MAP[row][col];
 2d6:	ec 2f       	mov	r30, r28
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	e1 53       	subi	r30, 0x31	; 49
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	ed 0f       	add	r30, r29
 2e8:	f1 1d       	adc	r31, r1
 2ea:	80 81       	ld	r24, Z
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <KEYPAD_getPressedKey+0x6a>
			
			// Activate current column
			GPIO_writePin(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + col, LOGIC_LOW);
			
			// Check rows
			for(uint8 row = 0; row < KEYPAD_ROWS; row++)
 2ee:	cf 5f       	subi	r28, 0xFF	; 255
 2f0:	c4 30       	cpi	r28, 0x04	; 4
 2f2:	f8 f2       	brcs	.-66     	; 0x2b2 <KEYPAD_getPressedKey+0x20>

uint8 KEYPAD_getPressedKey(void)
{
	while(1)
	{
		for(uint8 col = 0; col < KEYPAD_COLS; col++)
 2f4:	df 5f       	subi	r29, 0xFF	; 255
 2f6:	d4 30       	cpi	r29, 0x04	; 4
 2f8:	80 f2       	brcs	.-96     	; 0x29a <KEYPAD_getPressedKey+0x8>
 2fa:	cd cf       	rjmp	.-102    	; 0x296 <KEYPAD_getPressedKey+0x4>
					return KEYPAD_MAP[row][col];
				}
			}
		}
	}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <PCF8574_write>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
 306:	0e 94 3f 04 	call	0x87e	; 0x87e <TWI_start>
 30a:	0e 94 4f 04 	call	0x89e	; 0x89e <TWI_getStatus>
 30e:	88 30       	cpi	r24, 0x08	; 8
 310:	91 f4       	brne	.+36     	; 0x336 <PCF8574_write+0x34>
 312:	80 e4       	ldi	r24, 0x40	; 64
 314:	0e 94 48 04 	call	0x890	; 0x890 <TWI_writeByte>
 318:	0e 94 4f 04 	call	0x89e	; 0x89e <TWI_getStatus>
 31c:	88 31       	cpi	r24, 0x18	; 24
 31e:	69 f4       	brne	.+26     	; 0x33a <PCF8574_write+0x38>
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 48 04 	call	0x890	; 0x890 <TWI_writeByte>
 326:	0e 94 4f 04 	call	0x89e	; 0x89e <TWI_getStatus>
 32a:	88 32       	cpi	r24, 0x28	; 40
 32c:	41 f4       	brne	.+16     	; 0x33e <PCF8574_write+0x3c>
 32e:	0e 94 45 04 	call	0x88a	; 0x88a <TWI_stop>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	05 c0       	rjmp	.+10     	; 0x340 <PCF8574_write+0x3e>
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	03 c0       	rjmp	.+6      	; 0x340 <PCF8574_write+0x3e>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	01 c0       	rjmp	.+2      	; 0x340 <PCF8574_write+0x3e>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <LCD_sendCommand>:
 344:	cf 93       	push	r28
 346:	c8 2f       	mov	r28, r24
 348:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 352:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 356:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 35a:	8d 7f       	andi	r24, 0xFD	; 253
 35c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 360:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 364:	89 ef       	ldi	r24, 0xF9	; 249
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_sendCommand+0x24>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_sendCommand+0x2a>
 36e:	00 00       	nop
 370:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 374:	84 60       	ori	r24, 0x04	; 4
 376:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 37a:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 37e:	89 ef       	ldi	r24, 0xF9	; 249
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_sendCommand+0x3e>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_sendCommand+0x44>
 388:	00 00       	nop
 38a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	9c 2f       	mov	r25, r28
 392:	90 7f       	andi	r25, 0xF0	; 240
 394:	89 2b       	or	r24, r25
 396:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 39a:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 39e:	89 ef       	ldi	r24, 0xF9	; 249
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_sendCommand+0x5e>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_sendCommand+0x64>
 3a8:	00 00       	nop
 3aa:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 3ae:	8b 7f       	andi	r24, 0xFB	; 251
 3b0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 3b4:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 3b8:	89 ef       	ldi	r24, 0xF9	; 249
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_sendCommand+0x78>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_sendCommand+0x7e>
 3c2:	00 00       	nop
 3c4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 3ce:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 3d2:	89 ef       	ldi	r24, 0xF9	; 249
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCD_sendCommand+0x92>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <LCD_sendCommand+0x98>
 3dc:	00 00       	nop
 3de:	90 e1       	ldi	r25, 0x10	; 16
 3e0:	c9 9f       	mul	r28, r25
 3e2:	90 01       	movw	r18, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 3ea:	8f 70       	andi	r24, 0x0F	; 15
 3ec:	82 2b       	or	r24, r18
 3ee:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 3f2:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 3f6:	89 ef       	ldi	r24, 0xF9	; 249
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_sendCommand+0xb6>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
 402:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 406:	8b 7f       	andi	r24, 0xFB	; 251
 408:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 40c:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 410:	89 ef       	ldi	r24, 0xF9	; 249
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_init>:
 420:	0e 94 38 04 	call	0x870	; 0x870 <TWI_init>
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_sendCommand>
 42a:	88 e2       	ldi	r24, 0x28	; 40
 42c:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_sendCommand>
 430:	8f e0       	ldi	r24, 0x0F	; 15
 432:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_sendCommand>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_sendCommand>
 43c:	08 95       	ret

0000043e <LCD_displayCharacter>:
 43e:	cf 93       	push	r28
 440:	c8 2f       	mov	r28, r24
 442:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 446:	81 60       	ori	r24, 0x01	; 1
 448:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 44c:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 450:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 454:	8d 7f       	andi	r24, 0xFD	; 253
 456:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 45a:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 45e:	89 ef       	ldi	r24, 0xF9	; 249
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <LCD_displayCharacter+0x24>
 466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_displayCharacter+0x2a>
 468:	00 00       	nop
 46a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 46e:	84 60       	ori	r24, 0x04	; 4
 470:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 474:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 478:	89 ef       	ldi	r24, 0xF9	; 249
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCD_displayCharacter+0x3e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_displayCharacter+0x44>
 482:	00 00       	nop
 484:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 488:	8f 70       	andi	r24, 0x0F	; 15
 48a:	9c 2f       	mov	r25, r28
 48c:	90 7f       	andi	r25, 0xF0	; 240
 48e:	89 2b       	or	r24, r25
 490:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 494:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 498:	89 ef       	ldi	r24, 0xF9	; 249
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_displayCharacter+0x5e>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_displayCharacter+0x64>
 4a2:	00 00       	nop
 4a4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 4a8:	8b 7f       	andi	r24, 0xFB	; 251
 4aa:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 4ae:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <LCD_displayCharacter+0x78>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <LCD_displayCharacter+0x7e>
 4bc:	00 00       	nop
 4be:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 4c2:	84 60       	ori	r24, 0x04	; 4
 4c4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 4c8:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 4cc:	89 ef       	ldi	r24, 0xF9	; 249
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_displayCharacter+0x92>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_displayCharacter+0x98>
 4d6:	00 00       	nop
 4d8:	90 e1       	ldi	r25, 0x10	; 16
 4da:	c9 9f       	mul	r28, r25
 4dc:	90 01       	movw	r18, r0
 4de:	11 24       	eor	r1, r1
 4e0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	82 2b       	or	r24, r18
 4e8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 4ec:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 4f0:	89 ef       	ldi	r24, 0xF9	; 249
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_displayCharacter+0xb6>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_displayCharacter+0xbc>
 4fa:	00 00       	nop
 4fc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 500:	8b 7f       	andi	r24, 0xFB	; 251
 502:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 506:	0e 94 81 01 	call	0x302	; 0x302 <PCF8574_write>
 50a:	89 ef       	ldi	r24, 0xF9	; 249
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <LCD_displayCharacter+0xd0>
 512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_displayCharacter+0xd6>
 514:	00 00       	nop
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <LCD_displayString>:
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	8c 01       	movw	r16, r24
 522:	c0 e0       	ldi	r28, 0x00	; 0
 524:	03 c0       	rjmp	.+6      	; 0x52c <LCD_displayString+0x12>
 526:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_displayCharacter>
 52a:	cf 5f       	subi	r28, 0xFF	; 255
 52c:	f8 01       	movw	r30, r16
 52e:	ec 0f       	add	r30, r28
 530:	f1 1d       	adc	r31, r1
 532:	80 81       	ld	r24, Z
 534:	81 11       	cpse	r24, r1
 536:	f7 cf       	rjmp	.-18     	; 0x526 <LCD_displayString+0xc>
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <LCD_moveCursor>:
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	31 f0       	breq	.+12     	; 0x550 <LCD_moveCursor+0x10>
 544:	70 f0       	brcs	.+28     	; 0x562 <LCD_moveCursor+0x22>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	31 f0       	breq	.+12     	; 0x556 <LCD_moveCursor+0x16>
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	39 f0       	breq	.+14     	; 0x55c <LCD_moveCursor+0x1c>
 54e:	0a c0       	rjmp	.+20     	; 0x564 <LCD_moveCursor+0x24>
 550:	90 e4       	ldi	r25, 0x40	; 64
 552:	96 0f       	add	r25, r22
 554:	07 c0       	rjmp	.+14     	; 0x564 <LCD_moveCursor+0x24>
 556:	90 e1       	ldi	r25, 0x10	; 16
 558:	96 0f       	add	r25, r22
 55a:	04 c0       	rjmp	.+8      	; 0x564 <LCD_moveCursor+0x24>
 55c:	90 e5       	ldi	r25, 0x50	; 80
 55e:	96 0f       	add	r25, r22
 560:	01 c0       	rjmp	.+2      	; 0x564 <LCD_moveCursor+0x24>
 562:	96 2f       	mov	r25, r22
 564:	89 2f       	mov	r24, r25
 566:	80 68       	ori	r24, 0x80	; 128
 568:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_sendCommand>
 56c:	08 95       	ret

0000056e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	60 97       	sbiw	r28, 0x10	; 16
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 582:	4a e0       	ldi	r20, 0x0A	; 10
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	be 01       	movw	r22, r28
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	0e 94 83 04 	call	0x906	; 0x906 <itoa>
   LCD_displayString(buff); /* Display the string */
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_displayString>
}
 598:	60 96       	adiw	r28, 0x10	; 16
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_sendCommand>
 5b0:	08 95       	ret

000005b2 <SERVO_init>:
#include <avr/io.h>

void SERVO_init(void)
{
	// Set OC1A pin (PB1) as output
	GPIO_setupPinDirection(SERVO_PWM_PIN, PIN5_ID, PIN_OUTPUT);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	65 e0       	ldi	r22, 0x05	; 5
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <GPIO_setupPinDirection>
	
	// Fast PWM, TOP = ICR1, Clear OC1A on compare match
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
 5bc:	82 e8       	ldi	r24, 0x82	; 130
 5be:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
 5c0:	8a e1       	ldi	r24, 0x1A	; 26
 5c2:	8e bd       	out	0x2e, r24	; 46
	
	// Set ICR1 for 20ms period (50Hz) - 16MHz / (8 * 50) = 40000
	ICR1 = 40000;
 5c4:	80 e4       	ldi	r24, 0x40	; 64
 5c6:	9c e9       	ldi	r25, 0x9C	; 156
 5c8:	97 bd       	out	0x27, r25	; 39
 5ca:	86 bd       	out	0x26, r24	; 38
 5cc:	08 95       	ret

000005ce <SERVO_setAngle>:

void SERVO_setAngle(uint8 angle)
{
	// Map angle (0-180) to pulse width (1000-2000 microseconds)
	// 1000us = 0 degrees, 2000us = 180 degrees
	uint16 pulse = 1000 + ((uint32)angle * 1000 / 180);
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	a8 ee       	ldi	r26, 0xE8	; 232
 5d4:	b3 e0       	ldi	r27, 0x03	; 3
 5d6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__umulhisi3>
 5da:	24 eb       	ldi	r18, 0xB4	; 180
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__udivmodsi4>
 5e6:	28 51       	subi	r18, 0x18	; 24
 5e8:	3c 4f       	sbci	r19, 0xFC	; 252
	
	// Convert pulse width to timer ticks
	OCR1A = (pulse * 2);
 5ea:	22 0f       	add	r18, r18
 5ec:	33 1f       	adc	r19, r19
 5ee:	3b bd       	out	0x2b, r19	; 43
 5f0:	2a bd       	out	0x2a, r18	; 42
 5f2:	08 95       	ret

000005f4 <GPIO_setupPinDirection>:
			break;
		case PORTC_ID:
			DDRC = direction;
			break;
		case PORTD_ID:
			DDRD = direction;
 5f4:	68 30       	cpi	r22, 0x08	; 8
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <GPIO_setupPinDirection+0x6>
 5f8:	6f c0       	rjmp	.+222    	; 0x6d8 <GPIO_setupPinDirection+0xe4>
 5fa:	84 30       	cpi	r24, 0x04	; 4
 5fc:	08 f0       	brcs	.+2      	; 0x600 <GPIO_setupPinDirection+0xc>
 5fe:	6c c0       	rjmp	.+216    	; 0x6d8 <GPIO_setupPinDirection+0xe4>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	01 f1       	breq	.+64     	; 0x644 <GPIO_setupPinDirection+0x50>
 604:	30 f0       	brcs	.+12     	; 0x612 <GPIO_setupPinDirection+0x1e>
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	b1 f1       	breq	.+108    	; 0x676 <GPIO_setupPinDirection+0x82>
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	09 f4       	brne	.+2      	; 0x610 <GPIO_setupPinDirection+0x1c>
 60e:	4c c0       	rjmp	.+152    	; 0x6a8 <GPIO_setupPinDirection+0xb4>
 610:	08 95       	ret
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	59 f4       	brne	.+22     	; 0x62c <GPIO_setupPinDirection+0x38>
 616:	2a b3       	in	r18, 0x1a	; 26
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <GPIO_setupPinDirection+0x2e>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <GPIO_setupPinDirection+0x2a>
 626:	82 2b       	or	r24, r18
 628:	8a bb       	out	0x1a, r24	; 26
 62a:	08 95       	ret
 62c:	2a b3       	in	r18, 0x1a	; 26
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <GPIO_setupPinDirection+0x44>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <GPIO_setupPinDirection+0x40>
 63c:	80 95       	com	r24
 63e:	82 23       	and	r24, r18
 640:	8a bb       	out	0x1a, r24	; 26
 642:	08 95       	ret
 644:	41 30       	cpi	r20, 0x01	; 1
 646:	59 f4       	brne	.+22     	; 0x65e <GPIO_setupPinDirection+0x6a>
 648:	27 b3       	in	r18, 0x17	; 23
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <GPIO_setupPinDirection+0x60>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <GPIO_setupPinDirection+0x5c>
 658:	82 2b       	or	r24, r18
 65a:	87 bb       	out	0x17, r24	; 23
 65c:	08 95       	ret
 65e:	27 b3       	in	r18, 0x17	; 23
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <GPIO_setupPinDirection+0x76>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <GPIO_setupPinDirection+0x72>
 66e:	80 95       	com	r24
 670:	82 23       	and	r24, r18
 672:	87 bb       	out	0x17, r24	; 23
 674:	08 95       	ret
 676:	41 30       	cpi	r20, 0x01	; 1
 678:	59 f4       	brne	.+22     	; 0x690 <GPIO_setupPinDirection+0x9c>
 67a:	24 b3       	in	r18, 0x14	; 20
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <GPIO_setupPinDirection+0x92>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	6a 95       	dec	r22
 688:	e2 f7       	brpl	.-8      	; 0x682 <GPIO_setupPinDirection+0x8e>
 68a:	82 2b       	or	r24, r18
 68c:	84 bb       	out	0x14, r24	; 20
 68e:	08 95       	ret
 690:	24 b3       	in	r18, 0x14	; 20
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <GPIO_setupPinDirection+0xa8>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <GPIO_setupPinDirection+0xa4>
 6a0:	80 95       	com	r24
 6a2:	82 23       	and	r24, r18
 6a4:	84 bb       	out	0x14, r24	; 20
 6a6:	08 95       	ret
 6a8:	41 30       	cpi	r20, 0x01	; 1
 6aa:	59 f4       	brne	.+22     	; 0x6c2 <GPIO_setupPinDirection+0xce>
 6ac:	21 b3       	in	r18, 0x11	; 17
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <GPIO_setupPinDirection+0xc4>
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <GPIO_setupPinDirection+0xc0>
 6bc:	82 2b       	or	r24, r18
 6be:	81 bb       	out	0x11, r24	; 17
 6c0:	08 95       	ret
 6c2:	21 b3       	in	r18, 0x11	; 17
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <GPIO_setupPinDirection+0xda>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <GPIO_setupPinDirection+0xd6>
 6d2:	80 95       	com	r24
 6d4:	82 23       	and	r24, r18
 6d6:	81 bb       	out	0x11, r24	; 17
 6d8:	08 95       	ret

000006da <GPIO_writePin>:
 6da:	68 30       	cpi	r22, 0x08	; 8
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <GPIO_writePin+0x6>
 6de:	6f c0       	rjmp	.+222    	; 0x7be <GPIO_writePin+0xe4>
 6e0:	84 30       	cpi	r24, 0x04	; 4
 6e2:	08 f0       	brcs	.+2      	; 0x6e6 <GPIO_writePin+0xc>
 6e4:	6c c0       	rjmp	.+216    	; 0x7be <GPIO_writePin+0xe4>
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	01 f1       	breq	.+64     	; 0x72a <GPIO_writePin+0x50>
 6ea:	30 f0       	brcs	.+12     	; 0x6f8 <GPIO_writePin+0x1e>
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	b1 f1       	breq	.+108    	; 0x75c <GPIO_writePin+0x82>
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <GPIO_writePin+0x1c>
 6f4:	4c c0       	rjmp	.+152    	; 0x78e <GPIO_writePin+0xb4>
 6f6:	08 95       	ret
 6f8:	41 30       	cpi	r20, 0x01	; 1
 6fa:	59 f4       	brne	.+22     	; 0x712 <GPIO_writePin+0x38>
 6fc:	2b b3       	in	r18, 0x1b	; 27
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <GPIO_writePin+0x2e>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <GPIO_writePin+0x2a>
 70c:	82 2b       	or	r24, r18
 70e:	8b bb       	out	0x1b, r24	; 27
 710:	08 95       	ret
 712:	2b b3       	in	r18, 0x1b	; 27
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <GPIO_writePin+0x44>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	6a 95       	dec	r22
 720:	e2 f7       	brpl	.-8      	; 0x71a <GPIO_writePin+0x40>
 722:	80 95       	com	r24
 724:	82 23       	and	r24, r18
 726:	8b bb       	out	0x1b, r24	; 27
 728:	08 95       	ret
 72a:	41 30       	cpi	r20, 0x01	; 1
 72c:	59 f4       	brne	.+22     	; 0x744 <GPIO_writePin+0x6a>
 72e:	28 b3       	in	r18, 0x18	; 24
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <GPIO_writePin+0x60>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <GPIO_writePin+0x5c>
 73e:	82 2b       	or	r24, r18
 740:	88 bb       	out	0x18, r24	; 24
 742:	08 95       	ret
 744:	28 b3       	in	r18, 0x18	; 24
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <GPIO_writePin+0x76>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	6a 95       	dec	r22
 752:	e2 f7       	brpl	.-8      	; 0x74c <GPIO_writePin+0x72>
 754:	80 95       	com	r24
 756:	82 23       	and	r24, r18
 758:	88 bb       	out	0x18, r24	; 24
 75a:	08 95       	ret
 75c:	41 30       	cpi	r20, 0x01	; 1
 75e:	59 f4       	brne	.+22     	; 0x776 <GPIO_writePin+0x9c>
 760:	25 b3       	in	r18, 0x15	; 21
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <GPIO_writePin+0x92>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <GPIO_writePin+0x8e>
 770:	82 2b       	or	r24, r18
 772:	85 bb       	out	0x15, r24	; 21
 774:	08 95       	ret
 776:	25 b3       	in	r18, 0x15	; 21
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <GPIO_writePin+0xa8>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <GPIO_writePin+0xa4>
 786:	80 95       	com	r24
 788:	82 23       	and	r24, r18
 78a:	85 bb       	out	0x15, r24	; 21
 78c:	08 95       	ret
 78e:	41 30       	cpi	r20, 0x01	; 1
 790:	59 f4       	brne	.+22     	; 0x7a8 <GPIO_writePin+0xce>
 792:	22 b3       	in	r18, 0x12	; 18
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <GPIO_writePin+0xc4>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	6a 95       	dec	r22
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <GPIO_writePin+0xc0>
 7a2:	82 2b       	or	r24, r18
 7a4:	82 bb       	out	0x12, r24	; 18
 7a6:	08 95       	ret
 7a8:	22 b3       	in	r18, 0x12	; 18
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <GPIO_writePin+0xda>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	6a 95       	dec	r22
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <GPIO_writePin+0xd6>
 7b8:	80 95       	com	r24
 7ba:	82 23       	and	r24, r18
 7bc:	82 bb       	out	0x12, r24	; 18
 7be:	08 95       	ret

000007c0 <GPIO_readPin>:
 7c0:	68 30       	cpi	r22, 0x08	; 8
 7c2:	b0 f5       	brcc	.+108    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7c4:	84 30       	cpi	r24, 0x04	; 4
 7c6:	b0 f5       	brcc	.+108    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	89 f0       	breq	.+34     	; 0x7ee <GPIO_readPin+0x2e>
 7cc:	28 f0       	brcs	.+10     	; 0x7d8 <GPIO_readPin+0x18>
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	c9 f0       	breq	.+50     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d2:	83 30       	cpi	r24, 0x03	; 3
 7d4:	11 f1       	breq	.+68     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7d6:	30 c0       	rjmp	.+96     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7d8:	89 b3       	in	r24, 0x19	; 25
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <GPIO_readPin+0x22>
 7de:	95 95       	asr	r25
 7e0:	87 95       	ror	r24
 7e2:	6a 95       	dec	r22
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <GPIO_readPin+0x1e>
 7e6:	80 ff       	sbrs	r24, 0
 7e8:	29 c0       	rjmp	.+82     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	08 95       	ret
 7ee:	86 b3       	in	r24, 0x16	; 22
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <GPIO_readPin+0x38>
 7f4:	95 95       	asr	r25
 7f6:	87 95       	ror	r24
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <GPIO_readPin+0x34>
 7fc:	80 ff       	sbrs	r24, 0
 7fe:	20 c0       	rjmp	.+64     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	08 95       	ret
 804:	83 b3       	in	r24, 0x13	; 19
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	95 95       	asr	r25
 80c:	87 95       	ror	r24
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	80 ff       	sbrs	r24, 0
 814:	17 c0       	rjmp	.+46     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	08 95       	ret
 81a:	80 b3       	in	r24, 0x10	; 16
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	95 95       	asr	r25
 822:	87 95       	ror	r24
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	80 ff       	sbrs	r24, 0
 82a:	0e c0       	rjmp	.+28     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	08 95       	ret
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	08 95       	ret
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	08 95       	ret
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	08 95       	ret
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	08 95       	ret
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	08 95       	ret
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	08 95       	ret
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	08 95       	ret

0000084c <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 84c:	84 30       	cpi	r24, 0x04	; 4
 84e:	78 f4       	brcc	.+30     	; 0x86e <__stack+0xf>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	41 f0       	breq	.+16     	; 0x864 <__stack+0x5>
 854:	28 f0       	brcs	.+10     	; 0x860 <__stack+0x1>
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	39 f0       	breq	.+14     	; 0x868 <__stack+0x9>
 85a:	83 30       	cpi	r24, 0x03	; 3
 85c:	39 f0       	breq	.+14     	; 0x86c <__stack+0xd>
 85e:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
 860:	6b bb       	out	0x1b, r22	; 27
			break;
 862:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
 864:	68 bb       	out	0x18, r22	; 24
			break;
 866:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
 868:	65 bb       	out	0x15, r22	; 21
			break;
 86a:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
 86c:	62 bb       	out	0x12, r22	; 18
 86e:	08 95       	ret

00000870 <TWI_init>:
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	80 b9       	out	0x00, r24	; 0
 874:	11 b8       	out	0x01, r1	; 1
 876:	82 b9       	out	0x02, r24	; 2
 878:	84 e0       	ldi	r24, 0x04	; 4
 87a:	86 bf       	out	0x36, r24	; 54
 87c:	08 95       	ret

0000087e <TWI_start>:
 87e:	84 ea       	ldi	r24, 0xA4	; 164
 880:	86 bf       	out	0x36, r24	; 54
 882:	06 b6       	in	r0, 0x36	; 54
 884:	07 fe       	sbrs	r0, 7
 886:	fd cf       	rjmp	.-6      	; 0x882 <TWI_start+0x4>
 888:	08 95       	ret

0000088a <TWI_stop>:
 88a:	84 e9       	ldi	r24, 0x94	; 148
 88c:	86 bf       	out	0x36, r24	; 54
 88e:	08 95       	ret

00000890 <TWI_writeByte>:
 890:	83 b9       	out	0x03, r24	; 3
 892:	84 e8       	ldi	r24, 0x84	; 132
 894:	86 bf       	out	0x36, r24	; 54
 896:	06 b6       	in	r0, 0x36	; 54
 898:	07 fe       	sbrs	r0, 7
 89a:	fd cf       	rjmp	.-6      	; 0x896 <TWI_writeByte+0x6>
 89c:	08 95       	ret

0000089e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 89e:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 8a0:	88 7f       	andi	r24, 0xF8	; 248
 8a2:	08 95       	ret

000008a4 <__udivmodsi4>:
 8a4:	a1 e2       	ldi	r26, 0x21	; 33
 8a6:	1a 2e       	mov	r1, r26
 8a8:	aa 1b       	sub	r26, r26
 8aa:	bb 1b       	sub	r27, r27
 8ac:	fd 01       	movw	r30, r26
 8ae:	0d c0       	rjmp	.+26     	; 0x8ca <__udivmodsi4_ep>

000008b0 <__udivmodsi4_loop>:
 8b0:	aa 1f       	adc	r26, r26
 8b2:	bb 1f       	adc	r27, r27
 8b4:	ee 1f       	adc	r30, r30
 8b6:	ff 1f       	adc	r31, r31
 8b8:	a2 17       	cp	r26, r18
 8ba:	b3 07       	cpc	r27, r19
 8bc:	e4 07       	cpc	r30, r20
 8be:	f5 07       	cpc	r31, r21
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <__udivmodsi4_ep>
 8c2:	a2 1b       	sub	r26, r18
 8c4:	b3 0b       	sbc	r27, r19
 8c6:	e4 0b       	sbc	r30, r20
 8c8:	f5 0b       	sbc	r31, r21

000008ca <__udivmodsi4_ep>:
 8ca:	66 1f       	adc	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	1a 94       	dec	r1
 8d4:	69 f7       	brne	.-38     	; 0x8b0 <__udivmodsi4_loop>
 8d6:	60 95       	com	r22
 8d8:	70 95       	com	r23
 8da:	80 95       	com	r24
 8dc:	90 95       	com	r25
 8de:	9b 01       	movw	r18, r22
 8e0:	ac 01       	movw	r20, r24
 8e2:	bd 01       	movw	r22, r26
 8e4:	cf 01       	movw	r24, r30
 8e6:	08 95       	ret

000008e8 <__umulhisi3>:
 8e8:	a2 9f       	mul	r26, r18
 8ea:	b0 01       	movw	r22, r0
 8ec:	b3 9f       	mul	r27, r19
 8ee:	c0 01       	movw	r24, r0
 8f0:	a3 9f       	mul	r26, r19
 8f2:	70 0d       	add	r23, r0
 8f4:	81 1d       	adc	r24, r1
 8f6:	11 24       	eor	r1, r1
 8f8:	91 1d       	adc	r25, r1
 8fa:	b2 9f       	mul	r27, r18
 8fc:	70 0d       	add	r23, r0
 8fe:	81 1d       	adc	r24, r1
 900:	11 24       	eor	r1, r1
 902:	91 1d       	adc	r25, r1
 904:	08 95       	ret

00000906 <itoa>:
 906:	45 32       	cpi	r20, 0x25	; 37
 908:	51 05       	cpc	r21, r1
 90a:	20 f4       	brcc	.+8      	; 0x914 <itoa+0xe>
 90c:	42 30       	cpi	r20, 0x02	; 2
 90e:	10 f0       	brcs	.+4      	; 0x914 <itoa+0xe>
 910:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__itoa_ncheck>
 914:	fb 01       	movw	r30, r22
 916:	10 82       	st	Z, r1
 918:	cb 01       	movw	r24, r22
 91a:	08 95       	ret

0000091c <__itoa_ncheck>:
 91c:	bb 27       	eor	r27, r27
 91e:	4a 30       	cpi	r20, 0x0A	; 10
 920:	31 f4       	brne	.+12     	; 0x92e <__itoa_ncheck+0x12>
 922:	99 23       	and	r25, r25
 924:	22 f4       	brpl	.+8      	; 0x92e <__itoa_ncheck+0x12>
 926:	bd e2       	ldi	r27, 0x2D	; 45
 928:	90 95       	com	r25
 92a:	81 95       	neg	r24
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	0c 94 9a 04 	jmp	0x934	; 0x934 <__utoa_common>

00000932 <__utoa_ncheck>:
 932:	bb 27       	eor	r27, r27

00000934 <__utoa_common>:
 934:	fb 01       	movw	r30, r22
 936:	55 27       	eor	r21, r21
 938:	aa 27       	eor	r26, r26
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	aa 1f       	adc	r26, r26
 940:	a4 17       	cp	r26, r20
 942:	10 f0       	brcs	.+4      	; 0x948 <__utoa_common+0x14>
 944:	a4 1b       	sub	r26, r20
 946:	83 95       	inc	r24
 948:	50 51       	subi	r21, 0x10	; 16
 94a:	b9 f7       	brne	.-18     	; 0x93a <__utoa_common+0x6>
 94c:	a0 5d       	subi	r26, 0xD0	; 208
 94e:	aa 33       	cpi	r26, 0x3A	; 58
 950:	08 f0       	brcs	.+2      	; 0x954 <__utoa_common+0x20>
 952:	a9 5d       	subi	r26, 0xD9	; 217
 954:	a1 93       	st	Z+, r26
 956:	00 97       	sbiw	r24, 0x00	; 0
 958:	79 f7       	brne	.-34     	; 0x938 <__utoa_common+0x4>
 95a:	b1 11       	cpse	r27, r1
 95c:	b1 93       	st	Z+, r27
 95e:	11 92       	st	Z+, r1
 960:	cb 01       	movw	r24, r22
 962:	0c 94 b3 04 	jmp	0x966	; 0x966 <strrev>

00000966 <strrev>:
 966:	dc 01       	movw	r26, r24
 968:	fc 01       	movw	r30, r24
 96a:	67 2f       	mov	r22, r23
 96c:	71 91       	ld	r23, Z+
 96e:	77 23       	and	r23, r23
 970:	e1 f7       	brne	.-8      	; 0x96a <strrev+0x4>
 972:	32 97       	sbiw	r30, 0x02	; 2
 974:	04 c0       	rjmp	.+8      	; 0x97e <strrev+0x18>
 976:	7c 91       	ld	r23, X
 978:	6d 93       	st	X+, r22
 97a:	70 83       	st	Z, r23
 97c:	62 91       	ld	r22, -Z
 97e:	ae 17       	cp	r26, r30
 980:	bf 07       	cpc	r27, r31
 982:	c8 f3       	brcs	.-14     	; 0x976 <strrev+0x10>
 984:	08 95       	ret

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
